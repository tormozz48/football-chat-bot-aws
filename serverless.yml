org: tormozz48
app: football-chat-bot-aws
service: football-chat-bot-aws
frameworkVersion: '3'

custom:
  serviceName: ${self:service}
  stage: ${sls:stage}
  tableName: 'events-table-${sls:stage}'
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      docker: true
      sharedDb: true
      inMemory: false
      migrate: true
      seed: false
      noStart: false
      convertEmptyValues: true
      dockerImage: amazon/dynamodb-local

plugins:
  - serverless-jest-plugin
  - serverless-dynamodb-local
  - serverless-plugin-typescript
  - serverless-offline

provider:
  name: aws
  runtime: nodejs14.x
  versionFunctions: false
  tracing:
    lambda: true
  environment:
    SERVICE_NAME: ${self:custom.serviceName}
    STAGE: ${self:custom.stage}
    EVENTS_TABLE: ${self:custom.tableName}
    TELEGRAM_BOT_TOKEN: ${param:telegramBotToken}
    TELEGRAM_BOT_WEBHOOK_URL: ${param:telegramBotWebhookUrl}
    VK_TOKEN: ${param:vkToken}
    VK_CONFIRMATION: ${param:vkConfirmation}
    # uncomment for run tests
    # TELEGRAM_BOT_TOKEN: telegram-bot-test-token-12345
    # TELEGRAM_BOT_WEBHOOK_URL: http://telegram.bot.webhook.url
    # VK_TOKEN: vk-test-token-12345
    # VK_CONFIRMATION: confirmation-12345
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [ EventsTable, Arn ]
        - Effect: Allow
          Action:
            - lambda:InvokeFunction
          Resource:
            - arn:aws:lambda:*

functions:
  telegram:
    handler: src/handlers/telegram.handler
    events:
      - httpApi:
          path: /telegram
          method: post
  vk:
    handler: src/handlers/vk.handler
    events:
      - httpApi:
          path: /vk/callback
          method: post
  eventAdd:
    handler: src/actions/event-add.eventAdd
  eventInfo:
    handler: src/actions/event-info.eventInfo
  eventRemove:
    handler: src/actions/event-remove.eventRemove
  memberAdd:
    handler: src/actions/member-add.memberAdd
  memberRemove:
    handler: src/actions/member-remove.memberRemove

resources:
  Resources:
    EventsTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:custom.tableName}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          -
            AttributeName: chatId
            AttributeType: N
          -
            AttributeName: eventDate
            AttributeType: N
          -
            AttributeName: active
            AttributeType: N
        KeySchema:
          -
            AttributeName: chatId
            KeyType: HASH
          -
            AttributeName: eventDate
            KeyType: RANGE
        LocalSecondaryIndexes:
          - IndexName: LSIChatActiveEvent
            KeySchema:
              - AttributeName: chatId
                KeyType: HASH
              - AttributeName: active
                KeyType: RANGE
            Projection:
              ProjectionType: ALL